name: Perf Regression (NDJSON)

on:
  pull_request:
    branches: [ "**" ]
  push:
    branches: [ main ]

jobs:
  perf:
    name: Perf (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-2022, macos-14]
    env:
      PERF_TOL_QPS_PCT: "15"     # allowed drop percent for queries/sec
      PERF_TOL_GBPS_PCT: "15"    # allowed drop percent for effective GB/s (AM only)
      WARMUP_MS: "100"
      MEASURE_MS: "200"
      SAMPLES: "5"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Increase tolerances (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "PERF_TOL_QPS_PCT=25" >> $GITHUB_ENV
          echo "PERF_TOL_GBPS_PCT=25" >> $GITHUB_ENV
        shell: bash

      - name: Increase tolerances (macOS)
        if: runner.os == 'macOS'
        run: |
          echo "PERF_TOL_QPS_PCT=25" >> $GITHUB_ENV
          echo "PERF_TOL_GBPS_PCT=25" >> $GITHUB_ENV
        shell: bash

      - name: Normalize OS_NAME for baseline
        run: |
          if [ "$RUNNER_OS" = "Linux" ]; then
            echo "OS_NAME=linux" >> $GITHUB_ENV
          elif [ "$RUNNER_OS" = "Windows" ]; then
            echo "OS_NAME=windows" >> $GITHUB_ENV
          else
            echo "OS_NAME=macos" >> $GITHUB_ENV
          fi
        shell: bash



      - name: Normalize OS_NAME for baseline
        run: |
          if [ "$RUNNER_OS" = "Linux" ]; then
            echo "OS_NAME=linux" >> $GITHUB_ENV
          elif [ "$RUNNER_OS" = "Windows" ]; then
            echo "OS_NAME=windows" >> $GITHUB_ENV
          else
            echo "OS_NAME=macos" >> $GITHUB_ENV
          fi
        shell: bash


      - name: Install deps (Ubuntu)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y cmake build-essential

      - name: Configure
        run: |
          if [ "$RUNNER_OS" != "Windows" ]; then
            cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
          else
            cmake -S . -B build -G "Visual Studio 17 2022" -A x64
          fi
        shell: bash

      - name: Build
        run: |
          cmake --build build --config Release -j 4
        shell: bash


      - name: Record provenance
        run: |
          echo "RunnerOS=$RUNNER_OS"
          echo "ImageOS=$ImageOS"
          echo "ImageVersion=$ImageVersion"
          c++ --version || true
          clang++ --version || true
          cl.exe || true
          echo "--- CMake cache ---"
          grep -E 'CMAKE_CXX_COMPILER:|CMAKE_CXX_COMPILER_VERSION:|CMAKE_CXX_FLAGS:|CMAKE_BUILD_TYPE:' build/CMakeCache.txt || true
        shell: bash

      # Windows-specific execution: use PowerShell call operator '&' for .exe invocation.
      # Diagnostic instrumentation:
      # - Run am_bench.exe and cluster_bench.exe separately
      # - Capture and echo $LASTEXITCODE after each
      # - Redirect stderr to per-benchmark files and print them if exit!=0
      # - Preserve NDJSON stdout redirection to am.ndjson/cluster.ndjson
      - name: Run benches (NDJSON - Windows)
        if: runner.os == 'Windows'
        id: run_benches_windows
        shell: pwsh
        run: |
          # Do not stop on first error so we can capture both exit codes
          $ErrorActionPreference = 'Continue'
          $AM = "build/benchmarks/Release/am_bench.exe"
          $CL = "build/benchmarks/Release/cluster_bench.exe"
          Write-Host "Using $AM and $CL"

          # --- AM bench ---
          Write-Host "Running AM bench..."
          & $AM --json --warmup_ms=$env:WARMUP_MS --measure_ms=$env:MEASURE_MS --samples=$env:SAMPLES 1> am.ndjson 2> am.err.txt
          $AM_EXIT = $LASTEXITCODE
          Write-Host "AM bench exit code: $AM_EXIT"
          Write-Host ("am.ndjson lines: {0}" -f ((Test-Path am.ndjson) ? (Get-Content am.ndjson).Count : 0))
          if ($AM_EXIT -ne 0) {
            Write-Host "----- AM stderr -----"
            if (Test-Path am.err.txt) { Get-Content am.err.txt | Write-Host } else { Write-Host "(no stderr captured)" }
          }

          # --- Cluster bench ---
          Write-Host "Running Cluster bench..."
          & $CL --json --warmup_ms=$env:WARMUP_MS --measure_ms=$env:MEASURE_MS --samples=$env:SAMPLES 1> cluster.ndjson 2> cluster.err.txt
          $CL_EXIT = $LASTEXITCODE
          Write-Host "Cluster bench exit code: $CL_EXIT"
          Write-Host ("cluster.ndjson lines: {0}" -f ((Test-Path cluster.ndjson) ? (Get-Content cluster.ndjson).Count : 0))
          if ($CL_EXIT -ne 0) {
            Write-Host "----- Cluster stderr -----"
            if (Test-Path cluster.err.txt) { Get-Content cluster.err.txt | Write-Host } else { Write-Host "(no stderr captured)" }
          }

          # Fail the step if any benchmark failed
          if ($AM_EXIT -ne 0 -or $CL_EXIT -ne 0) { exit 1 } else { exit 0 }


      - name: Run benches (NDJSON - Unix)
        if: runner.os != 'Windows'
        id: run_benches_unix
        shell: bash
        run: |
          set -e
          AM=build/benchmarks/am_bench
          CL=build/benchmarks/cluster_bench
          echo "Using $AM and $CL"
          "$AM" --json --warmup_ms=$WARMUP_MS --measure_ms=$MEASURE_MS --samples=$SAMPLES > am.ndjson
          "$CL" --json --warmup_ms=$WARMUP_MS --measure_ms=$MEASURE_MS --samples=$SAMPLES > cluster.ndjson
          echo "am.ndjson lines: $(wc -l < am.ndjson || echo 0)"
          echo "cluster.ndjson lines: $(wc -l < cluster.ndjson || echo 0)"

      - name: Save NDJSON artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ndjson-${{ matrix.os }}
          path: |
            am.ndjson
            cluster.ndjson

      - name: Prepare Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Validate schema + compare with baseline
        env:
          OS_NAME: ${{ env.OS_NAME }}
        run: |
          python3 scripts/bench_check.py \
            --am am.ndjson \
            --cluster cluster.ndjson \
            --am-schema ci/ndjson_schema/am_bench.schema.json \
            --cluster-schema ci/ndjson_schema/cluster_bench.schema.json \
            --baseline-dir ci/perf_baseline \
            --os $OS_NAME \
            --tol-qps $PERF_TOL_QPS_PCT \
            --tol-gbps $PERF_TOL_GBPS_PCT
        shell: bash

      - name: Upload perf aggregates
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: perf-agg-${{ matrix.os }}
          path: perf_agg.ndjson

